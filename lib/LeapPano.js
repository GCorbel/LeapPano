// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

window.LeapPano = (function() {
  function LeapPano(config) {
    this.animate = __bind(this.animate, this);
    this.onWindowResize = __bind(this.onWindowResize, this);
    this.setFrame = __bind(this.setFrame, this);
    this.setFilePath = __bind(this.setFilePath, this);
    this.init = __bind(this.init, this);
    this.view = new LeapPano.View();
    this.mouse = new LeapPano.Mouse(this.view);
    this.leap = new LeapPano.LeapMotion(this.view);
    this.files = config.files;
    this.view.setFiles(this.files);
    this.view.setFilePath(this.files[0]);
  }

  LeapPano.prototype.init = function() {
    var container;
    this.mouse.init();
    this.leap.init();
    addEventListener("resize", this.onWindowResize, false);
    this.animate();
    container = document.getElementById("container");
    return container.appendChild(this.view.getRenderer().domElement);
  };

  LeapPano.prototype.setFilePath = function(path) {
    return this.view.setFilePath(path);
  };

  LeapPano.prototype.setFrame = function(frame) {
    return this.leap.setFrame(frame);
  };

  LeapPano.prototype.onWindowResize = function() {
    var camera;
    camera = this.view.getCamera();
    camera.aspect = innerWidth / innerHeight;
    camera.updateProjectionMatrix();
    return this.view.getRenderer().setSize(innerWidth, innerHeight);
  };

  LeapPano.prototype.animate = function() {
    requestAnimationFrame(this.animate);
    return this.view.render();
  };

  return LeapPano;

})();

LeapPano.LeapMotion = (function() {
  function LeapMotion(view) {
    this.checkMotion = __bind(this.checkMotion, this);
    this.checkGestures = __bind(this.checkGestures, this);
    this.changeLat = __bind(this.changeLat, this);
    this.changeLon = __bind(this.changeLon, this);
    this.checkMove = __bind(this.checkMove, this);
    this.view = view;
  }

  LeapMotion.prototype.setFrame = function(frame) {
    return this.frame = frame;
  };

  LeapMotion.prototype.init = function() {
    return setTimeout(this.checkMotion, 1);
  };

  LeapMotion.prototype.checkMove = function() {
    var finger;
    finger = this.frame.fingers[0];
    if (finger != null) {
      this.changeLon(finger);
      return this.changeLat(finger);
    }
  };

  LeapMotion.prototype.changeLon = function(finger) {
    var x;
    x = finger.tipPosition[0];
    return this.view.setLon(this.view.getLon() + (x / 320));
  };

  LeapMotion.prototype.changeLat = function(finger) {
    var latRatio, newLat, y;
    y = finger.tipPosition[1];
    latRatio = 1 - Math.abs((this.view.getLat()) / 80);
    newLat = this.view.getLat() + (((y - 160) / 320) * latRatio);
    if (newLat < 70 && newLat > -70) {
      return this.view.setLat(newLat);
    }
  };

  LeapMotion.prototype.checkGestures = function() {
    var gesture;
    if (this.frame.gestures.length > 0) {
      gesture = this.frame.gestures[0];
      if (gesture.type === "circle") {
        return this.view.switchFile();
      }
    }
  };

  LeapMotion.prototype.checkMotion = function() {
    if (this.frame != null) {
      this.checkMove();
      this.checkGestures();
    }
    return setTimeout(this.checkMotion, 1);
  };

  return LeapMotion;

})();

LeapPano.View = (function() {
  function View() {
    this.getScene = __bind(this.getScene, this);
    this.render = __bind(this.render, this);
    this.getCamera = __bind(this.getCamera, this);
    this.getRenderer = __bind(this.getRenderer, this);
    this.switchFile = __bind(this.switchFile, this);
    this.setFiles = __bind(this.setFiles, this);
    this.setFov = __bind(this.setFov, this);
    this.getFov = __bind(this.getFov, this);
    this.setLon = __bind(this.setLon, this);
    this.getLon = __bind(this.getLon, this);
    this.setLat = __bind(this.setLat, this);
    this.getLat = __bind(this.getLat, this);
    this.lat = 0;
    this.lon = 0;
    this.fov = 70;
    this.phi = 0;
    this.theta = 0;
    this.filePath = '';
  }

  View.prototype.setFilePath = function(path) {
    this.filePath = path;
    return this.scene = null;
  };

  View.prototype.getLat = function() {
    return this.lat;
  };

  View.prototype.setLat = function(lat) {
    return this.lat = lat;
  };

  View.prototype.getLon = function() {
    return this.lon;
  };

  View.prototype.setLon = function(lon) {
    return this.lon = lon;
  };

  View.prototype.getFov = function() {
    return this.fov;
  };

  View.prototype.setFov = function(fov) {
    return this.fov = fov;
  };

  View.prototype.setFiles = function(files) {
    return this.files = files;
  };

  View.prototype.switchFile = function() {
    if (this.filePath === this.files[0]) {
      return this.setFilePath(this.files[1]);
    } else {
      return this.setFilePath(this.files[0]);
    }
  };

  View.prototype.getRenderer = function() {
    if (this.renderer) {
      return this.renderer;
    }
    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setSize(innerWidth, innerHeight);
    return this.renderer;
  };

  View.prototype.getCamera = function() {
    if (this.camera) {
      return this.camera;
    }
    this.camera = new THREE.PerspectiveCamera(this.getFov(), innerWidth / innerHeight, 1, 1100);
    this.camera.target = new THREE.Vector3(0, 0, 0);
    return this.camera;
  };

  View.prototype.render = function() {
    var camera, lat, phi, theta;
    camera = this.getCamera();
    lat = Math.max(-85, Math.min(85, this.getLat()));
    phi = THREE.Math.degToRad(90 - lat);
    theta = THREE.Math.degToRad(this.getLon());
    camera.target.x = 500 * Math.sin(phi) * Math.cos(theta);
    camera.target.y = 500 * Math.cos(phi);
    camera.target.z = 500 * Math.sin(phi) * Math.sin(theta);
    camera.lookAt(camera.target);
    return this.getRenderer().render(this.getScene(), camera);
  };

  View.prototype.getScene = function() {
    var container, mesh;
    if (this.scene) {
      return this.scene;
    }
    container = void 0;
    mesh = void 0;
    this.scene = new THREE.Scene();
    mesh = new THREE.Mesh(new THREE.SphereGeometry(500, 60, 40), new THREE.MeshBasicMaterial({
      map: THREE.ImageUtils.loadTexture(this.filePath)
    }));
    mesh.scale.x = -1;
    this.scene.add(mesh);
    return this.scene;
  };

  return View;

})();

LeapPano.Mouse = (function() {
  function Mouse(view) {
    this.onDocumentMouseWheel = __bind(this.onDocumentMouseWheel, this);
    this.onDocumentMouseUp = __bind(this.onDocumentMouseUp, this);
    this.onDocumentMouseMove = __bind(this.onDocumentMouseMove, this);
    this.onDocumentMouseDown = __bind(this.onDocumentMouseDown, this);
    this.init = __bind(this.init, this);
    this.view = view;
    this.isUserInteracting = false;
  }

  Mouse.prototype.init = function() {
    document.addEventListener("mousedown", this.onDocumentMouseDown, false);
    document.addEventListener("mousemove", this.onDocumentMouseMove, false);
    document.addEventListener("mouseup", this.onDocumentMouseUp, false);
    document.addEventListener("mousewheel", this.onDocumentMouseWheel, false);
    return document.addEventListener("DOMMouseScroll", this.onDocumentMouseWheel, false);
  };

  Mouse.prototype.onDocumentMouseDown = function(event) {
    event.preventDefault();
    this.isUserInteracting = true;
    window.onPointerDownPointerX = event.clientX;
    window.onPointerDownPointerY = event.clientY;
    window.onPointerDownLon = this.view.getLon();
    return window.onPointerDownLat = this.view.getLat();
  };

  Mouse.prototype.onDocumentMouseMove = function(event) {
    if (this.isUserInteracting) {
      this.view.setLon((window.onPointerDownPointerX - event.clientX) * 0.1 + window.onPointerDownLon);
      return this.view.setLat((event.clientY - window.onPointerDownPointerY) * 0.1 + window.onPointerDownLat);
    }
  };

  Mouse.prototype.onDocumentMouseUp = function(event) {
    return this.isUserInteracting = false;
  };

  Mouse.prototype.onDocumentMouseWheel = function(event) {
    var fov;
    fov = this.view.getFov();
    if (event.wheelDeltaY) {
      fov -= event.wheelDeltaY * 0.05;
    } else if (event.wheelDelta) {
      fov -= event.wheelDelta * 0.05;
    } else {
      if (event.detail) {
        fov += event.detail * 1.0;
      }
    }
    this.view.setFov(fov);
    this.view.getCamera().projectionMatrix.makePerspective(fov, innerWidth / innerHeight, 1, 1100);
    return this.view.render();
  };

  return Mouse;

})();
